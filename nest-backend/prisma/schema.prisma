// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL_PLANET_SCALE")
  referentialIntegrity = "prisma" 
}

model User {
  id           String     @id @default(uuid())
  email        String
  username     String
  pwd          String
  profileUrl   String     @default("")
  lastLoggedIn DateTime   @default(now())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  members      Member[]
  assignees    Assignee[]
  projects     Project[]
  comments     Comment[]
  issues       Issue[]
}

model Project {
  id           String     @id @default(uuid())
  name         String     @db.VarChar(50)
  descr        String?    @db.VarChar(200)
  abbreviation String?    @db.VarChar(2)
  repo         String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  User         User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  sprints      Sprint[]    
  lists        List[]
  members      Member[]
  assignees    Assignee[]
}

model Member {
  id        String   @id @default(uuid())
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())
  Project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  User      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
}

model List {
  id        String   @id @default(uuid())
  name      String   @default("unnamed list")
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  issues    Issue[]
  Project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
}

model Issue {
  id                  String     @id @default(uuid())
  order               Int
  priority            Int
  type                Int
  progress            Int
  summary             String     @db.VarChar(100)
  descr               String?    @db.VarChar(500)
  abbreviationProject String?    @db.VarChar(2)
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  List                List?      @relation(fields: [listId], references: [id], onDelete: Cascade)
  listId              String
  User                User?      @relation(fields: [reporterId], references: [id], onDelete: Cascade)
  reporterId          String
  Sprint              Sprint?    @relation(fields: [sprintId], references: [id], onDelete: Cascade)
  sprintId            String
  comments            Comment[]
  assignees           Assignee[]
}

model Assignee {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  User      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  Issue     Issue?   @relation(fields: [issueId], references: [id], onDelete: Cascade)
  issueId   String
  Project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
}

model Comment {
  id        String   @id @default(uuid())
  descr     String   @db.VarChar(200)
  createdAt DateTime @default(now())
  Issue     Issue?   @relation(fields: [issueId], references: [id], onDelete: Cascade)
  issueId   String
  User      User?    @relation(fields: [userId], references: [id])
  userId    String
}

model Sprint {
  id          String    @id @default(uuid())
  name        String
  createdAt   DateTime  @default(now())
  Project     Project?  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  initialDate DateTime 
  finalDate   DateTime
  issues      Issue[]
}
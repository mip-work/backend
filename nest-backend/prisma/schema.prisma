// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL_PLANET_SCALE")
  relationMode = "prisma"
}

model User {
  id           String     @id @default(uuid())
  email        String     @unique
  username     String
  pwd          String
  profileUrl   String     @default("")
  lastLoggedIn DateTime   @default(now())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  members      Member[]
  assignees    Assignee[]
  projects     Project[]
  comments     Comment[]
}

model Project {
  id        String     @id @default(uuid())
  name      String     @db.VarChar(50)
  descr     String?    @db.VarChar(200)
  repo      String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  User      User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  lists     List[]
  members   Member[]
  assignees Assignee[]
  sprints   Sprint[]

  @@index([userId])
}

model Member {
  id        String   @id @default(uuid())
  userId    String
  role      String?  @default("common")
  createdAt DateTime @default(now())
  Project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  User      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([userId])
}

model List {
  id        String   @id @default(uuid())
  name      String   @default("unnamed list")
  parentId  String?   
  projectId String
  issues    Issue[]
  Project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([projectId])
}

model Issue {
  id         String     @id @default(uuid())
  priority   Int
  parentId   String?
  type       Int
  progress   Int
  title      String     @db.VarChar(100)
  descr      String?    @db.VarChar(500)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  List       List?      @relation(fields: [listId], references: [id], onDelete: Cascade)
  listId     String
  sprintId   String
  Sprint     Sprint?    @relation(fields: [sprintId], references: [id], onDelete: Cascade)
  comments   Comment[]
  assignees  Assignee[]

  @@index([listId])
  @@index([sprintId])
}

model Assignee {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  User      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  Issue     Issue?   @relation(fields: [issueId], references: [id], onDelete: Cascade)
  issueId   String
  Project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String

  @@index([userId])
  @@index([issueId])
  @@index([projectId])
}

model Comment {
  id        String   @id @default(uuid())
  descr     String   @db.VarChar(200)
  createdAt DateTime @default(now())
  Issue     Issue?   @relation(fields: [issueId], references: [id], onDelete: Cascade)
  issueId   String
  User      User?    @relation(fields: [userId], references: [id])
  userId    String

  @@index([issueId])
  @@index([userId])
}

model Sprint {
  id          String    @id @default(uuid())
  name        String
  createdAt   DateTime  @default(now())
  initialDate DateTime
  finalDate   DateTime
  projectId   String
  Project     Project?  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  issues      Issue[]

  @@index([projectId])
}
